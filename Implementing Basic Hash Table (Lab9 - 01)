#include <cstring>
#include <string>
#include <iostream>
using namespace std;

struct HashTable{
    int MAX_LENGTH = 4;
    string * password = new string[MAX_LENGTH];

    void initialize_hashtable(){
        for (int i = 0; i < MAX_LENGTH; i++){
            password[i].clear();
        }
    }

    bool isFull(){
        bool full = true;
        for (int i = 0; i < MAX_LENGTH; i++){
            if(password[i].empty()){
                full = false;
                break;
            }
        }
        return full;
    }

    int hashfunc(string user_name){
        int sum = 0;
        for (int i = 0; i < user_name.length(); i++){
            sum += user_name[i];
        }
        int hash = sum % MAX_LENGTH;
        return hash;
    }

    bool is_slot_empty(int hash){
        bool empty = password[hash].empty();
        return empty;
    }

    string get_user_name(int hash){
        // Not implemented in the code provided
        return "";
    }

    void insert(string user_name,string user_password) {
        int hash;
        bool empty;
        hash = hashfunc(user_name);
        empty = is_slot_empty(hash);

        if (isFull()) {
            cout << "Hash table is full, cannot insert new user." << endl;
            return;
        }

        if (empty) {
            // if the slot is empty, insert the new user
            password[hash] = user_password;
        } else {
            // if the slot is not empty, find the next available slot
            int key = (hash + 1) % MAX_LENGTH;
            while (key != hash && !is_slot_empty(key)) {
                key = (key + 1) % MAX_LENGTH;
            }
            if (key == hash) {
                // we have checked every slot and there are no more available
                cout << "Hash table is full, cannot insert new user." << endl;
                return;
            }
            // we have found an available slot, insert the new user
            password[key] = user_password;
        }
    }

    void hash_lookup(string user_name){
        int hash;
        bool empty;
        hash = hashfunc(user_name);
        empty = is_slot_empty(hash);

        if (empty) {
            // Slot is empty, so the user name was not found
            cout << "User name not found." << endl;
            return;
        } else if (user_name == get_user_name(hash)) {
            // User name matches the one in the slot
            cout << "User password: " << password[hash] << endl;
            return;
        } else {
            // User name does not match
            int key = (hash + key) % MAX_LENGTH;
            while (key != hash && (is_slot_empty(key) || user_name != get_user_name(key))) {
                key = (key + 1) % MAX_LENGTH;
            }
            if (key == hash) {
                // Username not found.
                cout << "User name not found." << endl;
                return;
            }
            //Found correct username
            cout << "User password: " << password[key] << endl;
            return;
        }
    }

    void delete_item(string user_name){
        int hash;
        bool empty;
        hash = hashfunc(user_name);
        empty = is_slot_empty(hash);
        if(empty){
            cout<<"No item found\n";
        }
        else{
            password[hash].clear();
            cout<<"User deleted\n";
        }

    }
    void print_hashtable(){
        for(int i=0;i<MAX_LENGTH;i++){
            cout<<"["<<i<<"]-->"<<password[i]<<"\n";
        }
    }

};

int main(){
    HashTable * hashtbl = new HashTable;
    hashtbl->initialize_hashtable();
    cout<< hashtbl->isFull()<<"\n";

    int command=0;
    string user_name;
    string password;
    while (command!=-1){
        /* code */
        cout << "Type command: ";
        cin >> command;
        switch (command){
            case 1:
                /* insert the new item*/
                cout << "Enter user name: ";
                cin >> user_name;
                cout << "Enter password to be saved: ";
                cin >> password;
                hashtbl->insert(user_name,password);
                break;
            case 2:
                /* delete item */
                cout << "Enter item to be deleted: ";
                cin >> user_name;
                hashtbl->delete_item(user_name);
                break;
            case 3:
                /* hash lookup password*/
                cout << "Enter user name to look up password:";
                cin >> user_name;
                hashtbl->hash_lookup(user_name);
                break;
            case 4:
                hashtbl->print_hashtable();
                break;
            case -1:
                /* hash lookup password*/
                cout << "Exiting...\n";
                break;

        }


    }
    return 0;
}
