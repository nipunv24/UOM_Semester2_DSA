#include <iostream>
#include <vector>
#include <queue>
#include <limits>
#include <xmath.h>

using namespace std;

//Defining infinity to set as the distance for each start node.
#define INF numeric_limits<int>::max()

// Graph class with respective attributes annd methods
class Graph {
private:
    int numVertices;
    vector<vector<int>> adjecencyMatrix;

public:
    // Constructor
    Graph(int vertices) {
        numVertices = vertices;

        // Initialize the adjacency matrix with all zeros
        adjecencyMatrix.resize(numVertices, vector<int>(numVertices, 0));
    }

    // Function to add an edge to the graph
    void addEdge(int start, int end, int weight) {
        adjecencyMatrix[start][end] = weight;
        adjecencyMatrix[end][start] = weight;
    }

    //Implementing Dijkstra's algorithm to output the shortest path to each vertex from each source.
    vector<int> dijkstra(int source) {
        // Initialize distance array with infinity
        vector<int> dist(numVertices, INF);

        // Set distance of source vertex to 0
        dist[source] = 0;

        // Priority queue to get the vertex with the minimum distance
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Insert the source vertex with distance into the priority queue
        pq.push({0, source});

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            for (int v = 0; v < numVertices; ++v) {
                // If there is an edge from u to v and the distance through u is shorter
                if (adjecencyMatrix[u][v] != 0 && dist[u] + adjecencyMatrix[u][v] < dist[v]) {
                    dist[v] = dist[u] + adjecencyMatrix[u][v];
                    pq.push({dist[v], v});
                }
            }
        }

        return dist;
    }
};

int main() {
    // Create a graph with 6 vertices
    Graph graph(6);

    // Add edges to the graph
    graph.addEdge(0, 1, 10);
    graph.addEdge(0, 4, 15);
    graph.addEdge(0, 5, 5);
    graph.addEdge(1, 2, 10);
    graph.addEdge(1, 3, 30);
    graph.addEdge(2, 3, 12);
    graph.addEdge(2, 4, 5);
    graph.addEdge(3, 5, 20);


    // Run Dijkstra's algorithm from source vertex 0
    int sourceVertex = 5;
    vector<int> shortestDistances = graph.dijkstra(sourceVertex);

    // Print the shortest distances to each vertex
    cout << "Shortest distances from source vertex "<<sourceVertex<<":"<<endl;
    for (int i = 0; i < shortestDistances.size(); ++i) {
        cout << "To vertex " << i << ": " << shortestDistances[i] << endl;
    }

    return 0;
}
